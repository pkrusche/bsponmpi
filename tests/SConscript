
Import("bsp", "libsuffix", "runtests")

def Test(env, target, source):
	p = env.Program (target, source)
	env.Test (target + ".passed", p)

if runtests:
	Test (bsp, 'bsp_test_delivtable', ['bsp_test_delivtable.c'] )
	#Test (bsp, 'bsp_test_exptable', ['bsp_test_exptable.c'])
	Test (bsp, 'bsp_test_fixtable', ['bsp_test_fixtable.c'])
	Test (bsp, 'bsp_test_memreg', ['bsp_test_memreg.c'])
	Test (bsp, 'bsp_test_reqtable', ['bsp_test_reqtable.c'])
	Test (bsp, 'bsp_test_get', ['bsp_test_get.c'])
	Test (bsp, 'bsp_test_put', ['bsp_test_put.c'])
	Test (bsp, 'bsp_test_send', ['bsp_test_send.c'])
	Test (bsp, 'bsp_test_global_drma', ['bsp_test_global_drma.c'])
	Test (bsp, 'bsp_test_collectives', ['bsp_test_collectives.c'])
	Test (bsp, 'bsp_test_cpp_collectives', ['bsp_test_cpp_collectives.cpp'])
	Test (bsp, 'bsp_test_sharedvars', ['bsp_test_sharedvars.cpp'])
	Test (bsp, 'bsp_test_ops', ['bsp_test_ops.cpp'])